/*
 * @Author: sunqida
 * @Date: 2019-10-06 09:31:25
 * @LastEditors: sunqida
 * @LastEditTime: 2019-10-06 09:59:03
 * @Description:
 */
package tcp

import (
	"bufio"
	//	"fmt"
	"log"
	"net"
	"time"
)

// Client holds info about connection
type Client struct {
	conn     net.Conn
	Server   *server
	incoming chan string // Channel for incoming data from client
}

var (
	ListConsole map[string]net.Conn
	ListDevice  map[string]net.Conn
)

// TCP server
type server struct {
	clients                  []*Client
	address                  string        // Address to open connection: localhost:9999
	joins                    chan net.Conn // Channel for new connections
	onNewClientCallback      func(c *Client)
	onClientConnectionClosed func(c *Client, err error)
	onNewMessage             func(c *Client, message []byte)
}

// Read client data from channel
func (c *Client) listen() {

	ListConsole = make(map[string]net.Conn)
	ListDevice = make(map[string]net.Conn)

	reader := bufio.NewReader(c.conn)
	buffer := make([]byte, 1024)
	for {

		// c1 := make(chan bool, 1)
		// go func() {
		// 	message, err := reader.ReadString('\n')
		// 	if err != nil {
		// 		c.conn.Close()
		// 		c.Server.onClientConnectionClosed(c, err)
		// 		return
		// 	}
		// 	c.Server.onNewMessage(c, message)
		// 	c1 <- true
		// 	close(c1)
		// }()
		// select {
		// case <-c1:
		// 	//over
		// case <-time.After(1e9):
		// 	fmt.Println("rec timeout")
		// }

		length, err := reader.Read(buffer)
		if err != nil {
			c.conn.Close()
			c.Server.onClientConnectionClosed(c, err)
			return
		}
		c.Server.onNewMessage(c, buffer[0:length])
		buffer = make([]byte, 1024)

	}
}

func (c *Client) Send(message []byte) error {
	c.conn.SetWriteDeadline(time.Now().Add(time.Second * 5)) //发送超时5秒
	_, err := c.conn.Write(message)
	return err
}

// Get conn
func (c *Client) GetConn() net.Conn {
	return c.conn
}

// Called right after server starts listening new client
func (s *server) OnNewClient(callback func(c *Client)) {
	s.onNewClientCallback = callback
}

// Called right after connection closed
func (s *server) OnClientConnectionClosed(callback func(c *Client, err error)) {
	s.onClientConnectionClosed = callback
}

// Called when Client receives new message
func (s *server) OnNewMessage(callback func(c *Client, message []byte)) {
	s.onNewMessage = callback
}

// Creates new Client instance and starts listening
func (s *server) newClient(conn net.Conn) {
	client := &Client{
		conn:   conn,
		Server: s,
	}
	go client.listen()

	s.onNewClientCallback(client)
}

// Listens new connections channel and creating new client
func (s *server) listenChannels() {
	for {
		select {
		case conn := <-s.joins:
			s.newClient(conn)
		}
	}
}

// Start network server
func (s *server) Listen() {
	go s.listenChannels()
	//var err error
	listener, err := net.Listen("tcp", s.address)
	if err != nil {
		log.Fatal("Error starting TCP server.")
	}
	defer listener.Close()

	for {
		conn, _ := listener.Accept()
		s.joins <- conn
	}
}

// Creates new tcp server instance
func New(address string) *server {
	log.Println("Creating server with address", address)
	server := &server{
		address: address,
		joins:   make(chan net.Conn),
	}

	server.OnNewClient(func(c *Client) {})
	server.OnNewMessage(func(c *Client, message []byte) {})
	server.OnClientConnectionClosed(func(c *Client, err error) {})

	return server
}
